/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Interface;

import Business.Car;
import Business.CarList;
import java.awt.CardLayout;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *Date: Oct 5 2019
 * @author rashmirj
 * 
 * Manages car details 
 * Displays list of cars in the fleet along with their attributes
 * GIves basic info about the fleet
 * Allows user to filter based on their choice of criteria
 * Navigates to a new panel on filtering
 * Does basic filter validations * 
 * Allows update and delete of data
 * 
 */
public class ManageCarsPanel extends javax.swing.JPanel {

    /**
     * Creates new form ManageCarsPanel
     */
    private CarList carDir;
    private JPanel bottomPanel;

    public ManageCarsPanel(JPanel bottomPanel, CarList carDir) {
        initComponents();
        this.bottomPanel = bottomPanel;
        this.carDir = carDir;
        populate();
    }

    public void populate() {
        DefaultTableModel dtm = (DefaultTableModel) tblDirectory.getModel();
        dtm.setRowCount(0);

        DefaultTableModel dtm2 = (DefaultTableModel) tblBrand.getModel();
        dtm2.setRowCount(0);

        for (Car a : carDir.getCars()) {
            Object[] row = new Object[dtm.getColumnCount()];
            row[0] = a;
            row[1] = a.getModelNum();
            row[2] = a.getBrand();
            row[3] = a.getMinSeats();
            row[4] = a.getMaxSeats();
            row[5] = a.getManufacturedYear();
            if (a.isMaintenanceCert()) {
                row[6] = "Valid";
            } else {
                row[6] = "Expired";
            }

            if (a.isAvailable()) {
                row[7] = "Available";
            } else {
                row[7] = "Not Available";
            }
            row[8] = a.getSerialNum();
            row[9] = a.getLastUpdatedDate();
            dtm.addRow(row);
        }

        for (String b : carDir.getCarBrands()) {
            Object[] rowB = new Object[dtm2.getColumnCount()];
            rowB[0] = b;
            dtm2.addRow(rowB);
        }

        lblCarsAvl.setText(String.valueOf(carDir.getAvlCars()));
        lblCarsNotAvl.setText(String.valueOf(carDir.getNotAvlCars()));
        lblLastUpdatedDate.setText(String.valueOf(carDir.getLastUpd()));
    }

    public void populate(List<Car> cars) {
        DefaultTableModel dtm = (DefaultTableModel) tblDirectory.getModel();
        dtm.setRowCount(0);

        for (Car a : cars) {
            Object[] row = new Object[dtm.getColumnCount()];
            row[0] = a;
            row[1] = a.getModelNum();
            row[2] = a.getBrand();
            row[3] = a.getMinSeats();
            row[4] = a.getMaxSeats();
            row[5] = a.getManufacturedYear();
            if (a.isMaintenanceCert()) {
                row[6] = "Valid";
            } else {
                row[6] = "Expired";
            }

            if (a.isAvailable()) {
                row[7] = "Available";
            } else {
                row[7] = "Not Available";
            }
            row[8] = a.getSerialNum();
            row[9] = a.getLastUpdatedDate();
            dtm.addRow(row);

            lblCarsAvl.setText(String.valueOf(carDir.getAvlCars()));
            lblCarsNotAvl.setText(String.valueOf(carDir.getNotAvlCars()));
            lblLastUpdatedDate.setText(String.valueOf(carDir.getLastUpd()));
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnBack = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblBrand = new javax.swing.JTable();
        btnDelete = new javax.swing.JButton();
        btnView = new javax.swing.JButton();
        lblView = new javax.swing.JLabel();
        btnFilter = new javax.swing.JButton();
        lblRoutingNo = new javax.swing.JLabel();
        lblRoutingNo3 = new javax.swing.JLabel();
        lblRoutingNo4 = new javax.swing.JLabel();
        lblRoutingNo5 = new javax.swing.JLabel();
        lblRoutingNo6 = new javax.swing.JLabel();
        lblRoutingNo7 = new javax.swing.JLabel();
        lblRoutingNo8 = new javax.swing.JLabel();
        btnFirstAvl = new javax.swing.JButton();
        lblCarsAvl = new javax.swing.JLabel();
        lblCarsNotAvl = new javax.swing.JLabel();
        lblLastUpdatedDate = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblDirectory = new javax.swing.JTable();
        cFilters = new javax.swing.JComboBox<>();
        lblRoutingNo9 = new javax.swing.JLabel();
        txtSearchField = new javax.swing.JTextField();
        lblRoutingNo10 = new javax.swing.JLabel();
        btnReset = new javax.swing.JButton();
        txtMax = new javax.swing.JTextField();
        lblMin = new javax.swing.JLabel();
        lblMax = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 0, 153));
        setPreferredSize(new java.awt.Dimension(1365, 750));
        setRequestFocusEnabled(false);

        btnBack.setBackground(new java.awt.Color(255, 255, 255));
        btnBack.setFont(new java.awt.Font("Times New Roman", 3, 18)); // NOI18N
        btnBack.setForeground(new java.awt.Color(255, 0, 153));
        btnBack.setText("<< Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        tblBrand.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Brands"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblBrand);
        if (tblBrand.getColumnModel().getColumnCount() > 0) {
            tblBrand.getColumnModel().getColumn(0).setResizable(false);
        }

        btnDelete.setBackground(new java.awt.Color(255, 255, 255));
        btnDelete.setFont(new java.awt.Font("Times New Roman", 3, 18)); // NOI18N
        btnDelete.setForeground(new java.awt.Color(255, 0, 153));
        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnView.setBackground(new java.awt.Color(255, 255, 255));
        btnView.setFont(new java.awt.Font("Times New Roman", 3, 18)); // NOI18N
        btnView.setForeground(new java.awt.Color(255, 0, 153));
        btnView.setText("View Details");
        btnView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewActionPerformed(evt);
            }
        });

        lblView.setFont(new java.awt.Font("Times New Roman", 3, 36)); // NOI18N
        lblView.setForeground(new java.awt.Color(255, 255, 255));
        lblView.setText("Manage Car Details");

        btnFilter.setBackground(new java.awt.Color(255, 255, 255));
        btnFilter.setFont(new java.awt.Font("Times New Roman", 3, 18)); // NOI18N
        btnFilter.setForeground(new java.awt.Color(255, 0, 153));
        btnFilter.setText("Filter Results");
        btnFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFilterActionPerformed(evt);
            }
        });

        lblRoutingNo.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        lblRoutingNo.setForeground(new java.awt.Color(255, 255, 255));
        lblRoutingNo.setText("Quick Info: ");

        lblRoutingNo3.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        lblRoutingNo3.setForeground(new java.awt.Color(255, 255, 255));
        lblRoutingNo3.setText("Advanced Search: ");

        lblRoutingNo4.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        lblRoutingNo4.setForeground(new java.awt.Color(255, 255, 255));
        lblRoutingNo4.setText("Find me the first available car : ");

        lblRoutingNo5.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        lblRoutingNo5.setForeground(new java.awt.Color(255, 255, 255));
        lblRoutingNo5.setText("Number of cars available:");

        lblRoutingNo6.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        lblRoutingNo6.setForeground(new java.awt.Color(255, 255, 255));
        lblRoutingNo6.setText("All Car manufactures owned:");

        lblRoutingNo7.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        lblRoutingNo7.setForeground(new java.awt.Color(255, 255, 255));
        lblRoutingNo7.setText("Last time fleet was updated:");

        lblRoutingNo8.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        lblRoutingNo8.setForeground(new java.awt.Color(255, 255, 255));
        lblRoutingNo8.setText("Number of cars not available:");

        btnFirstAvl.setBackground(new java.awt.Color(255, 255, 255));
        btnFirstAvl.setFont(new java.awt.Font("Times New Roman", 3, 18)); // NOI18N
        btnFirstAvl.setForeground(new java.awt.Color(255, 0, 153));
        btnFirstAvl.setText("Go");
        btnFirstAvl.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFirstAvlActionPerformed(evt);
            }
        });

        lblCarsAvl.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        lblCarsAvl.setForeground(new java.awt.Color(255, 255, 255));

        lblCarsNotAvl.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        lblCarsNotAvl.setForeground(new java.awt.Color(255, 255, 255));

        lblLastUpdatedDate.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        lblLastUpdatedDate.setForeground(new java.awt.Color(255, 255, 255));

        tblDirectory.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "City", "Model Number", "Brand", "Min. Seats", "Max. Seats", "Mfd. Yr.", "Maintenance Cert. Status", "Available", "Serial Num.", "Last Updated"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, true, true, true, true, true, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tblDirectory);
        if (tblDirectory.getColumnModel().getColumnCount() > 0) {
            tblDirectory.getColumnModel().getColumn(0).setHeaderValue("City");
            tblDirectory.getColumnModel().getColumn(1).setHeaderValue("Model Number");
            tblDirectory.getColumnModel().getColumn(2).setResizable(false);
            tblDirectory.getColumnModel().getColumn(3).setHeaderValue("Min. Seats");
            tblDirectory.getColumnModel().getColumn(4).setHeaderValue("Max. Seats");
            tblDirectory.getColumnModel().getColumn(5).setHeaderValue("Mfd. Yr.");
            tblDirectory.getColumnModel().getColumn(6).setHeaderValue("Maintenance Cert. Status");
            tblDirectory.getColumnModel().getColumn(7).setHeaderValue("Available");
            tblDirectory.getColumnModel().getColumn(8).setHeaderValue("Serial Num.");
            tblDirectory.getColumnModel().getColumn(9).setHeaderValue("Last Updated");
        }

        cFilters.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Brand of the car", "Manufactured year of the car", "Seats required in a car", "Serial Number of the car", "Model Number of the car", "City where the car belongs", "Maintenence certificate expired" }));
        cFilters.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cFiltersActionPerformed(evt);
            }
        });

        lblRoutingNo9.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        lblRoutingNo9.setForeground(new java.awt.Color(255, 255, 255));
        lblRoutingNo9.setText("Filter Condition -");

        lblRoutingNo10.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        lblRoutingNo10.setForeground(new java.awt.Color(255, 255, 255));
        lblRoutingNo10.setText("Filter -");

        btnReset.setBackground(new java.awt.Color(255, 255, 255));
        btnReset.setFont(new java.awt.Font("Times New Roman", 3, 18)); // NOI18N
        btnReset.setForeground(new java.awt.Color(255, 0, 153));
        btnReset.setText("Reset");
        btnReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetActionPerformed(evt);
            }
        });

        txtMax.setEnabled(false);

        lblMin.setText("           ");

        lblMax.setText("           ");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(60, 60, 60)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblRoutingNo3)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblRoutingNo)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(8, 8, 8)
                                .addComponent(btnDelete)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnView)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lblRoutingNo4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnFirstAvl)
                        .addGap(158, 158, 158))))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addContainerGap()
                            .addComponent(btnBack)
                            .addGap(312, 312, 312)
                            .addComponent(lblView))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(618, 618, 618)
                            .addComponent(lblRoutingNo6)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(91, 91, 91)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(lblRoutingNo7)
                                        .addComponent(lblRoutingNo8)
                                        .addComponent(lblRoutingNo5))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(lblCarsAvl, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(lblCarsNotAvl, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(lblLastUpdatedDate, javax.swing.GroupLayout.PREFERRED_SIZE, 388, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(lblRoutingNo9)
                                        .addComponent(lblRoutingNo10))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(txtSearchField, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                            .addComponent(txtMax, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addComponent(cFilters, javax.swing.GroupLayout.PREFERRED_SIZE, 475, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(280, 280, 280)
                        .addComponent(lblMin)
                        .addGap(154, 154, 154)
                        .addComponent(lblMax)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnFilter)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnReset)
                .addContainerGap(240, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 1341, Short.MAX_VALUE)
                    .addContainerGap()))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnBack)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(lblView)))
                .addGap(192, 192, 192)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnDelete)
                            .addComponent(btnView)
                            .addComponent(lblRoutingNo4)
                            .addComponent(btnFirstAvl))
                        .addGap(37, 37, 37)
                        .addComponent(lblRoutingNo)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblRoutingNo5)
                                    .addComponent(lblCarsAvl, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblRoutingNo8)
                                    .addComponent(lblCarsNotAvl, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(lblRoutingNo6))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(13, 13, 13)
                                .addComponent(lblRoutingNo7))
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblLastUpdatedDate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(42, 42, 42)
                .addComponent(lblRoutingNo3)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cFilters, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblRoutingNo9))
                        .addGap(9, 9, 9)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtSearchField, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblRoutingNo10)
                            .addComponent(txtMax, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnFilter)
                            .addComponent(btnReset)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(76, 76, 76)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblMin)
                            .addComponent(lblMax))))
                .addContainerGap(135, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(82, 82, 82)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(525, Short.MAX_VALUE)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        bottomPanel.remove(this);
        CardLayout layout = (CardLayout) bottomPanel.getLayout();
        layout.previous(bottomPanel);
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
        int selectedRow = tblDirectory.getSelectedRow();
        if (selectedRow >= 0) {
            int selectionButton = JOptionPane.YES_NO_OPTION;
            int selectionResult = JOptionPane.showConfirmDialog(null, "Are you sure to delete??", "Warning", selectionButton);
            if (selectionResult == JOptionPane.YES_OPTION) {
                Car car = (Car) tblDirectory.getValueAt(selectedRow, 0);
                carDir.deleteCar(car);
                populate();
            }
        } else {
            JOptionPane.showMessageDialog(null, "Please select a Row!!");
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewActionPerformed
        // TODO add your handling code here:
        int selectedRow = tblDirectory.getSelectedRow();
        if (selectedRow >= 0) {
            Car car = (Car) tblDirectory.getValueAt(selectedRow, 0);
            ViewPanel view = new ViewPanel(this.bottomPanel, car, carDir);
            this.bottomPanel.add("ViewPanel", view);
            CardLayout layout = (CardLayout) this.bottomPanel.getLayout();
            layout.next(this.bottomPanel);
        } else {
            JOptionPane.showMessageDialog(null, "Please select any row!");
        }
    }//GEN-LAST:event_btnViewActionPerformed

    private void btnFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFilterActionPerformed
        // TODO add your handling code here:
        int selectedDD = cFilters.getSelectedIndex();
        List<Car> filteredResults = new ArrayList<>();

        switch (selectedDD) {
            case 0: { //brand filter
                String brandCurr = txtSearchField.getText();
                if (brandCurr == null || brandCurr.equals("")) {
                    JOptionPane.showMessageDialog(null, "Brand cannot be empty!");
                    return;
                }
                filteredResults = carDir.filterBrand(brandCurr, carDir.getCars());
                break;
            }
            case 1: { //mfd year
                try {
                    Integer.parseInt(txtSearchField.getText());
                } catch (NumberFormatException e) {
                    JOptionPane.showMessageDialog(null, "Please input a valid Manufactured year for the car!");
                    return;
                }

                filteredResults = carDir.filterYear(Integer.parseInt(txtSearchField.getText()), carDir.getCars());
                break;
            }
            case 2: {
                try {
                    Integer.parseInt(txtSearchField.getText());
                } catch (NumberFormatException e) {
                    JOptionPane.showMessageDialog(null, "Please input a valid minimum number of seats!");
                    return;
                }
                try {
                    Integer.parseInt(txtMax.getText());
                } catch (NumberFormatException e) {
                    JOptionPane.showMessageDialog(null, "Please input a valid maximum number of seats!!");
                    return;
                }

                if (Integer.parseInt(txtMax.getText()) < Integer.parseInt(txtSearchField.getText())) {
                    JOptionPane.showMessageDialog(null, "Please ensure minimum is less than the maximum number of seats!!");
                    return;
                }

                filteredResults = carDir.filterSeats(Integer.parseInt(txtSearchField.getText()), Integer.parseInt(txtMax.getText()), carDir.getCars());
                break;
            }
            case 3: { //serial number
                try {
                    Integer.parseInt(txtSearchField.getText());
                } catch (NumberFormatException e) {
                    JOptionPane.showMessageDialog(null, "Please input a valid serial number!");
                    return;
                }
                filteredResults = carDir.filterSerialNum(Integer.parseInt(txtSearchField.getText()), carDir.getCars());
                break;
            }
            case 4: { //model num
                String modelCurr = txtSearchField.getText();
                if (modelCurr == null || modelCurr.equals("")) {
                    JOptionPane.showMessageDialog(null, "Model Number cannot be empty!");
                    return;
                }
                filteredResults = carDir.filterModelNum(txtSearchField.getText(), carDir.getCars());
                break;
            }
            case 5: { //city
                String cityCurr = txtSearchField.getText();
                if (cityCurr == null || cityCurr.equals("")) {
                    JOptionPane.showMessageDialog(null, "City cannot be empty!");
                    return;
                }
                filteredResults = carDir.filterCity(txtSearchField.getText(), carDir.getCars());
                break;
            }
            case 6: { //maintenance expired
                filteredResults = carDir.filterEXpMCert(carDir.getCars());
                break;
            }

        }

        if (filteredResults.size() > 0) {
            FilterResultsPanel filter = new FilterResultsPanel(bottomPanel, carDir, filteredResults);
            this.bottomPanel.add("filter", filter);
            CardLayout layout = (CardLayout) this.bottomPanel.getLayout();
            layout.next(this.bottomPanel);
        } else {
            JOptionPane.showMessageDialog(null, "No results found, change search parameter and try again!");
        }
        /*String fltrCity = txtCity.getText();
        String fltrModelNum = txtModelNum.getText();
        String fltrBrand = txtBrand.getText();
        int fltrMinSeats = Integer.parseInt(txtMinSeats.getText());
        int fltrMaxSeats = Integer.parseInt(txtMaxSeats.getText());
        int fltrMfdYr = Integer.parseInt(txtMfdYr.getText());
        Boolean fltrMaintenanceCert = cbMaintenanceCert.isSelected();
        Boolean fltrAvailable = cbAvailable.isSelected();
        int fltrSerialNum = Integer.parseInt(txtSerialNum.getText());*/


    }//GEN-LAST:event_btnFilterActionPerformed

    private void btnFirstAvlActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFirstAvlActionPerformed
        // TODO add your handling code here:
        List<Car> firstAvlCar = carDir.getFirstAvlCar();
        if (firstAvlCar.size() > 0) {
            populate(firstAvlCar);
        } else {
            JOptionPane.showMessageDialog(null, "No results found, change search parameter and try again!");
        }
    }//GEN-LAST:event_btnFirstAvlActionPerformed

    private void btnResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetActionPerformed
        // TODO add your handling code here:
         int selectedDD = cFilters.getSelectedIndex();
        if (selectedDD == 2) {
            txtMax.setEnabled(true);
            lblMin.setText("MIN SEATS");
            lblMax.setText("MAX SEATS");
            txtSearchField.setEnabled(true);
        } else if (selectedDD == 6) {
            txtMax.setEnabled(false);
            lblMin.setText("");
            txtSearchField.setEnabled(false);
            lblMax.setText("");
        } else {
            txtMax.setEnabled(false);
            lblMin.setText("");
            txtSearchField.setEnabled(true);
            lblMax.setText("");
        }
        populate();
        txtMax.setText("");
        txtSearchField.setText("");
    }//GEN-LAST:event_btnResetActionPerformed

    private void cFiltersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cFiltersActionPerformed
        // TODO add your handling code here:
        int selectedDD = cFilters.getSelectedIndex();
        if (selectedDD == 2) {
            txtMax.setEnabled(true);
            lblMin.setText("MIN SEATS");
            lblMax.setText("MAX SEATS");
            txtSearchField.setEnabled(true);
        } else if (selectedDD == 6) {
            txtMax.setEnabled(false);
            lblMin.setText("");
            txtSearchField.setEnabled(false);
            lblMax.setText("");
        } else {
            txtMax.setEnabled(false);
            lblMin.setText("");
            txtSearchField.setEnabled(true);
            lblMax.setText("");
        }
    }//GEN-LAST:event_cFiltersActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnFilter;
    private javax.swing.JButton btnFirstAvl;
    private javax.swing.JButton btnReset;
    private javax.swing.JButton btnView;
    private javax.swing.JComboBox<String> cFilters;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblCarsAvl;
    private javax.swing.JLabel lblCarsNotAvl;
    private javax.swing.JLabel lblLastUpdatedDate;
    private javax.swing.JLabel lblMax;
    private javax.swing.JLabel lblMin;
    private javax.swing.JLabel lblRoutingNo;
    private javax.swing.JLabel lblRoutingNo10;
    private javax.swing.JLabel lblRoutingNo3;
    private javax.swing.JLabel lblRoutingNo4;
    private javax.swing.JLabel lblRoutingNo5;
    private javax.swing.JLabel lblRoutingNo6;
    private javax.swing.JLabel lblRoutingNo7;
    private javax.swing.JLabel lblRoutingNo8;
    private javax.swing.JLabel lblRoutingNo9;
    private javax.swing.JLabel lblView;
    private javax.swing.JTable tblBrand;
    private javax.swing.JTable tblDirectory;
    private javax.swing.JTextField txtMax;
    private javax.swing.JTextField txtSearchField;
    // End of variables declaration//GEN-END:variables
}
