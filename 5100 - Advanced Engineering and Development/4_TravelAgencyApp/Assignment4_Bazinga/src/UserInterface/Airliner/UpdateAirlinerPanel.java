/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.Airliner;

import Business.Airline.Airliner;
import Business.Airline.AirlinerDirectory;
import Business.Airline.Airplane;
import java.awt.CardLayout;
import java.awt.Color;
import java.awt.Component;
import java.util.ArrayList;
import javax.swing.BorderFactory;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author rashmirj
 */
public class UpdateAirlinerPanel extends javax.swing.JPanel {

    private JPanel rightPanel;
    private AirlinerDirectory alnDir;
    private Airliner alr;
    private ArrayList<Airplane> updateAirplane;
    private ArrayList<Airliner> airlinerList;

    /**
     * Creates new form UpdateAirlinerPanel
     */
    public UpdateAirlinerPanel(JPanel rightPanel, Airliner alr, ArrayList<Airliner> airlinerList) {
        this.alnDir = alnDir;
        this.rightPanel = rightPanel;
        this.alr = alr;
        this.airlinerList = airlinerList;
        initComponents();
        txtAlrName.setText(alr.getAlrName());
        txtAlrAddr.setText(alr.getAlrAddress());
        txtAlrCity.setText(alr.getAlrCity());
        txtAlrState.setText(alr.getAlrState());
        txtAlrCountry.setText(alr.getAlrCountry());
        txtAlrZip.setText(alr.getAlrZipCode());
        updateAirplane = alr.getAlrPlanes();
        populatePlanes(updateAirplane);
    }

    public void populatePlanes(ArrayList<Airplane> updateAirplane) {
        DefaultTableModel dtm = (DefaultTableModel) tblAirplane.getModel();
        dtm.setRowCount(0);

        for (Airplane a : updateAirplane) {
            Object[] row = new Object[dtm.getColumnCount()];
            row[0] = a;
            row[1] = a.getAlnType();
            row[2] = a.getAlnCapacity();
            dtm.addRow(row);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnUpdateAlr = new javax.swing.JButton();
        txtAlrZip = new javax.swing.JTextField();
        lblCountry = new javax.swing.JLabel();
        lblZip = new javax.swing.JLabel();
        btnAddAirplane = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        lblAirplaneCount = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblAirplane = new javax.swing.JTable();
        txtAlrName = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        txtAlrAddr = new javax.swing.JTextField();
        btnDeleteAirplane = new javax.swing.JButton();
        lblName = new javax.swing.JLabel();
        txtAlrCity = new javax.swing.JTextField();
        btnUpdateAirplane = new javax.swing.JButton();
        lblAddress = new javax.swing.JLabel();
        txtAlrState = new javax.swing.JTextField();
        btnBack = new javax.swing.JButton();
        lblCity = new javax.swing.JLabel();
        txtAlrCountry = new javax.swing.JTextField();
        lblState = new javax.swing.JLabel();
        btnCancel = new javax.swing.JButton();
        btnSave = new javax.swing.JButton();

        setMinimumSize(new java.awt.Dimension(950, 750));

        btnUpdateAlr.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnUpdateAlr.setText("Update");
        btnUpdateAlr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateAlrActionPerformed(evt);
            }
        });

        txtAlrZip.setEnabled(false);

        lblCountry.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblCountry.setText("Country:");

        lblZip.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblZip.setText("Zip:");

        btnAddAirplane.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnAddAirplane.setText("Add Airplane to Airline");
        btnAddAirplane.setEnabled(false);
        btnAddAirplane.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddAirplaneActionPerformed(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel8.setText("No. Of Airplanes:");

        lblAirplaneCount.setText(" ");

        tblAirplane.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Number", "Type", "Capacity"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblAirplane);

        txtAlrName.setEnabled(false);

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel9.setText("Airplanes Added:");

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setText("Update Airliner");

        txtAlrAddr.setEnabled(false);

        btnDeleteAirplane.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnDeleteAirplane.setText("Delete Airplane");
        btnDeleteAirplane.setEnabled(false);
        btnDeleteAirplane.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteAirplaneActionPerformed(evt);
            }
        });

        lblName.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblName.setText("Name:");

        txtAlrCity.setEnabled(false);

        btnUpdateAirplane.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnUpdateAirplane.setText("Update Airplane");
        btnUpdateAirplane.setEnabled(false);
        btnUpdateAirplane.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateAirplaneActionPerformed(evt);
            }
        });

        lblAddress.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblAddress.setText("Street Address: ");

        txtAlrState.setEnabled(false);

        btnBack.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnBack.setText("Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        lblCity.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblCity.setText("City:");

        txtAlrCountry.setEnabled(false);

        lblState.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblState.setText("State:");

        btnCancel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnCancel.setText("Cancel");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        btnSave.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnSave.setText("Save");
        btnSave.setEnabled(false);
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(36, 36, 36)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnBack)
                                .addGap(290, 290, 290)
                                .addComponent(jLabel1))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel8)
                                    .addComponent(lblName)
                                    .addComponent(lblAddress)
                                    .addComponent(lblCity)
                                    .addComponent(lblState)
                                    .addComponent(lblCountry)
                                    .addComponent(lblZip)
                                    .addComponent(jLabel9))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtAlrZip, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtAlrCountry, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(lblAirplaneCount)
                                        .addGap(167, 167, 167)
                                        .addComponent(btnAddAirplane))
                                    .addComponent(txtAlrState, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtAlrCity, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtAlrAddr, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtAlrName, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 329, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(btnUpdateAirplane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(btnDeleteAirplane, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(480, 480, 480)
                        .addComponent(btnSave)
                        .addGap(18, 18, 18)
                        .addComponent(btnUpdateAlr)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnCancel)))
                .addContainerGap(227, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(btnBack))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addComponent(lblName))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addComponent(txtAlrName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblAddress)
                    .addComponent(txtAlrAddr, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCity)
                    .addComponent(txtAlrCity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblState)
                    .addComponent(txtAlrState, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCountry)
                    .addComponent(txtAlrCountry, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblZip)
                    .addComponent(txtAlrZip, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(lblAirplaneCount)
                    .addComponent(btnAddAirplane))
                .addGap(18, 18, 18)
                .addComponent(jLabel9)
                .addGap(8, 8, 8)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addComponent(btnUpdateAirplane)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnDeleteAirplane, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 114, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnUpdateAlr)
                    .addComponent(btnCancel)
                    .addComponent(btnSave))
                .addGap(31, 31, 31))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnUpdateAirplaneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateAirplaneActionPerformed

        int selectedRow = tblAirplane.getSelectedRow();
        if (selectedRow >= 0) {
            Airplane airplane = (Airplane) tblAirplane.getValueAt(selectedRow, 0);
            UpdateAirplanePanel updateAlpPanel = new UpdateAirplanePanel(this.rightPanel, airplane, this.alr);
            this.rightPanel.add("UpdateAirplanePanel", updateAlpPanel);
            CardLayout layout = (CardLayout) this.rightPanel.getLayout();
            layout.next(rightPanel);
        } else {
            JOptionPane.showMessageDialog(null, "Please select a airplane");
        }
    }//GEN-LAST:event_btnUpdateAirplaneActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed

        rightPanel.remove(this);
        CardLayout layout = (CardLayout) rightPanel.getLayout();
        layout.previous(rightPanel);

        Component[] comps = this.rightPanel.getComponents();
        for (Component comp : comps) {
            if (comp instanceof ManageAirlinerPanel) {
                ManageAirlinerPanel alrUpdatePanel = (ManageAirlinerPanel) comp;
                alrUpdatePanel.populate(airlinerList);
            }
        }
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnUpdateAlrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateAlrActionPerformed
        // TODO add your handling code here:
        txtAlrAddr.setEnabled(true);
        txtAlrCity.setEnabled(true);
        txtAlrCountry.setEnabled(true);
        txtAlrName.setEnabled(true);
        txtAlrState.setEnabled(true);
        txtAlrZip.setEnabled(true);
        btnAddAirplane.setEnabled(true);
        btnSave.setEnabled(true);
        btnUpdateAlr.setEnabled(false);
        btnUpdateAirplane.setEnabled(true);
        btnDeleteAirplane.setEnabled(true);

    }//GEN-LAST:event_btnUpdateAlrActionPerformed

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        // TODO add your handling code here:
        txtAlrName.setText(alr.getAlrName());
        txtAlrAddr.setText(alr.getAlrAddress());
        txtAlrCity.setText(alr.getAlrCity());
        txtAlrState.setText(alr.getAlrState());
        txtAlrCountry.setText(alr.getAlrCountry());
        txtAlrZip.setText(alr.getAlrZipCode());
        btnAddAirplane.setEnabled(false);
        btnSave.setEnabled(false);
        btnUpdateAlr.setEnabled(true);
        btnUpdateAirplane.setEnabled(false);
        btnDeleteAirplane.setEnabled(false);
        txtAlrAddr.setEnabled(false);
        txtAlrCity.setEnabled(false);
        txtAlrCountry.setEnabled(false);
        txtAlrName.setEnabled(false);
        txtAlrState.setEnabled(false);
        txtAlrZip.setEnabled(false);
    }//GEN-LAST:event_btnCancelActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        // TODO add your handling code here:
        String name = txtAlrName.getText();
        if (name == null || name.equals("")) {
            JOptionPane.showMessageDialog(null, "Airliner name can't be empty");
            txtAlrName.setBorder(BorderFactory.createLineBorder(Color.RED));
            lblName.setForeground(Color.red);
            return;
        } else if (!name.matches("^[a-zA-Z_ ]*$")) {
            JOptionPane.showMessageDialog(null, "Airliner name must contain only alphabets");
            txtAlrName.setBorder(BorderFactory.createLineBorder(Color.RED));
            lblName.setForeground(Color.red);
            return;
        }
        String stAddress = txtAlrAddr.getText();
        if (stAddress == null || stAddress.equals("")) {
            JOptionPane.showMessageDialog(null, "Street address can't be empty");
            txtAlrAddr.setBorder(BorderFactory.createLineBorder(Color.RED));
            lblAddress.setForeground(Color.red);
            return;
        }
        String city = txtAlrCity.getText();
        if (city == null || city.equals("")) {
            JOptionPane.showMessageDialog(null, "City can't be empty");
            txtAlrCity.setBorder(BorderFactory.createLineBorder(Color.RED));
            lblCity.setForeground(Color.red);
            return;
        } else if (!city.matches("^[a-zA-Z_ ]*$")) {
            JOptionPane.showMessageDialog(null, "City name must contain only alphabets");
            txtAlrCity.setBorder(BorderFactory.createLineBorder(Color.RED));
            lblCity.setForeground(Color.red);
            return;
        }
        String state = txtAlrState.getText();
        if (state == null || state.equals("")) {
            JOptionPane.showMessageDialog(null, "State can't be empty");
            txtAlrState.setBorder(BorderFactory.createLineBorder(Color.RED));
            lblState.setForeground(Color.red);
            return;
        } else if (!state.matches("^[a-zA-Z_ ]*$")) {
            JOptionPane.showMessageDialog(null, "State name must contain only alphabets");
            txtAlrState.setBorder(BorderFactory.createLineBorder(Color.RED));
            lblState.setForeground(Color.red);
            return;
        }
        String country = txtAlrCountry.getText();
        if (country == null || country.equals("")) {
            JOptionPane.showMessageDialog(null, "Country name can't be empty");
            txtAlrCountry.setBorder(BorderFactory.createLineBorder(Color.RED));
            lblCountry.setForeground(Color.red);
            return;
        } else if (!country.matches("^[a-zA-Z_ ]*$")) {
            JOptionPane.showMessageDialog(null, "Country name must contain only alphabets");
            txtAlrCountry.setBorder(BorderFactory.createLineBorder(Color.RED));
            lblCountry.setForeground(Color.red);
            return;
        }
        String zip = txtAlrZip.getText();
        try {
            Integer.parseInt(zip);
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Please enter number for zipcode");
            txtAlrZip.setBorder(BorderFactory.createLineBorder(Color.RED));
            lblZip.setForeground(Color.red);
            return;
        }
        txtAlrName.setBorder(BorderFactory.createLineBorder(Color.BLACK));
        lblName.setForeground(Color.BLACK);
        txtAlrAddr.setBorder(BorderFactory.createLineBorder(Color.BLACK));
        lblAddress.setForeground(Color.BLACK);
        txtAlrState.setBorder(BorderFactory.createLineBorder(Color.BLACK));
        lblState.setForeground(Color.BLACK);
        txtAlrCountry.setBorder(BorderFactory.createLineBorder(Color.BLACK));
        lblCountry.setForeground(Color.BLACK);
        txtAlrZip.setBorder(BorderFactory.createLineBorder(Color.BLACK));
        lblZip.setForeground(Color.BLACK);        
        txtAlrCity.setBorder(BorderFactory.createLineBorder(Color.BLACK));
        lblCity.setForeground(Color.BLACK);

        alr.setAlrPlanes(updateAirplane);
        alr.setAlrName(name);
        alr.setAlrAddress(stAddress);
        alr.setAlrCity(city);
        alr.setAlrState(state);
        alr.setAlrCountry(country);
        alr.setAlrZipCode(zip);
        alr.setAlrPlanes(updateAirplane);
        JOptionPane.showMessageDialog(null, "Airliner Updated Successfully");
        txtAlrAddr.setEnabled(false);
        txtAlrCity.setEnabled(false);
        txtAlrCountry.setEnabled(false);
        txtAlrName.setEnabled(false);
        txtAlrState.setEnabled(false);
        txtAlrZip.setEnabled(false);
        btnAddAirplane.setEnabled(false);
        btnSave.setEnabled(false);
        btnUpdateAlr.setEnabled(true);
        btnUpdateAirplane.setEnabled(false);
        btnDeleteAirplane.setEnabled(false);
    }//GEN-LAST:event_btnSaveActionPerformed

    private void btnAddAirplaneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddAirplaneActionPerformed
        CreateAirplanePanel createAirplanePanel = new CreateAirplanePanel(rightPanel, alnDir, alr.getAlrPlanes(), "update");
        rightPanel.add("createAirplanePanel", createAirplanePanel);
        CardLayout layout = (CardLayout) rightPanel.getLayout();
        layout.next(rightPanel);
    }//GEN-LAST:event_btnAddAirplaneActionPerformed

    private void btnDeleteAirplaneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteAirplaneActionPerformed
        // TODO add your handling code here:
        int selectedRow = tblAirplane.getSelectedRow();
        if (selectedRow >= 0) {
            int selectionButton = JOptionPane.YES_NO_OPTION;
            int selectionResult = JOptionPane.showConfirmDialog(null, "Are you sure to delete airplane??", "Warning", selectionButton);
            if (selectionResult == JOptionPane.YES_OPTION) {
                Airplane plane = (Airplane) tblAirplane.getValueAt(selectedRow, 0);
                updateAirplane.remove(plane);
                populatePlanes(updateAirplane);
            }
        } else {
            JOptionPane.showMessageDialog(null, "Please select a Airplane");
        }
    }//GEN-LAST:event_btnDeleteAirplaneActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddAirplane;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnDeleteAirplane;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnUpdateAirplane;
    private javax.swing.JButton btnUpdateAlr;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblAddress;
    private javax.swing.JLabel lblAirplaneCount;
    private javax.swing.JLabel lblCity;
    private javax.swing.JLabel lblCountry;
    private javax.swing.JLabel lblName;
    private javax.swing.JLabel lblState;
    private javax.swing.JLabel lblZip;
    private javax.swing.JTable tblAirplane;
    private javax.swing.JTextField txtAlrAddr;
    private javax.swing.JTextField txtAlrCity;
    private javax.swing.JTextField txtAlrCountry;
    private javax.swing.JTextField txtAlrName;
    private javax.swing.JTextField txtAlrState;
    private javax.swing.JTextField txtAlrZip;
    // End of variables declaration//GEN-END:variables
}
