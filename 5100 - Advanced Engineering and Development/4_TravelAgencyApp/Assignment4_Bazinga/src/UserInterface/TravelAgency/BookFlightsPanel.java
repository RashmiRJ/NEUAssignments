/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.TravelAgency;

import Business.TravelAgency.Booking;
import Business.TravelAgency.BookingDirectory;
import Business.Customer.CustomerDirectory;
import Business.Flights.Flight;
import Business.Flights.FlightDirectory;
import java.awt.CardLayout;
import java.awt.Color;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.swing.BorderFactory;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author shriya22
 */
public class BookFlightsPanel extends javax.swing.JPanel {

    //add jcomboboxes to all 4 fields
    /**
     * Creates new form BookFlightsPanel
     */
    private FlightDirectory fltDir;
    private JPanel rightPanel;
    private Booking booking;
    private BookingDirectory bookDir;
    private Date d;
    private CustomerDirectory custDir;

    public BookFlightsPanel(JPanel rightPanel, FlightDirectory fltDir, BookingDirectory bookDir, CustomerDirectory custDir) {
        this.d = new Date();
        initComponents();
        this.fltDir = fltDir;
        this.rightPanel = rightPanel;
        this.bookDir = bookDir;
        this.custDir = custDir;
        btnBook.setVisible(false);
        tblFlights.setVisible(false);
        jCSource.removeAllItems();
        jCDestination.removeAllItems();
        populateFromFlights();
        populateToFlights();
        populateFlightDates();

    }

    private void populateFromFlights() {

        ArrayList<Flight> flights = fltDir.getFlightList();
        ArrayList<String> duplicateList = new ArrayList<String>();
        for (Flight f : flights) {
            if (!duplicateList.contains(f.getFlFromLoc())) {
                duplicateList.add(f.getFlFromLoc());
            }
        }
        DefaultComboBoxModel dml = new DefaultComboBoxModel();
        for (String flt : duplicateList) {
            dml.addElement(flt);
            jCSource.setModel(dml);
        }

    }

    private void populateToFlights() {

        ArrayList<Flight> flights = fltDir.getFlightList();
        ArrayList<String> duplicateList = new ArrayList<String>();
        for (Flight f : flights) {
            if (!duplicateList.contains(f.getFlToLoc())) {
                duplicateList.add(f.getFlToLoc());
            }
        }
        DefaultComboBoxModel dml = new DefaultComboBoxModel();
        for (String flt : duplicateList) {
            dml.addElement(flt);
            jCDestination.setModel(dml);
        }

    }
    private void populateFlightDates() {

        ArrayList<Flight> flights = fltDir.getFlightList();
        ArrayList<String> duplicateList = new ArrayList<String>();
        String todayWithZeroTime;
        DateFormat formatter = new SimpleDateFormat("yyyy-MM-dd");
        for (Flight f : flights) {
            if (!duplicateList.contains(f.getFlDate())) {
                try {
                    todayWithZeroTime = formatter.format(f.getFlDate());
                    duplicateList.add(todayWithZeroTime);
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, "Incorrect date object");
                }
            }
        }
        DefaultComboBoxModel dml = new DefaultComboBoxModel();
        for (String flt : duplicateList) {
            dml.addElement(flt);
            jCDdate.setModel(dml);
        }

    }

    private void populateSearchresults(List<Flight> result) {
        DefaultTableModel dtm = (DefaultTableModel) tblFlights.getModel();
        dtm.setRowCount(0);
        for (Flight f : result) {
            Object[] row = new Object[dtm.getColumnCount()];
            row[0] = f;
            row[1] = f.getFlNumber();
            row[2] = f.getFlCost();
            row[3] = f.getFlDate();
            row[4] = f.getFlFlyingTime();

            dtm.addRow(row);
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblTitle = new javax.swing.JLabel();
        lblFrom = new javax.swing.JLabel();
        lblTo = new javax.swing.JLabel();
        lblNoOfTravellers = new javax.swing.JLabel();
        lblDate = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblFlights = new javax.swing.JTable();
        btnSearch = new javax.swing.JButton();
        btnBook = new javax.swing.JButton();
        jCSource = new javax.swing.JComboBox<>();
        jCDestination = new javax.swing.JComboBox<>();
        jCTraveller = new javax.swing.JComboBox<>();
        jCDdate = new javax.swing.JComboBox<>();

        lblTitle.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        lblTitle.setText("Book Flights");

        lblFrom.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        lblFrom.setText("Flying From:");

        lblTo.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        lblTo.setText("Flying To:");

        lblNoOfTravellers.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        lblNoOfTravellers.setText("No. of Travellers:");

        lblDate.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        lblDate.setText("Departing Date:");

        tblFlights.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Airliner", "Flight Number", "Cost", "Departure Date", "Departure Time"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblFlights);

        btnSearch.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        btnBook.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnBook.setText("Book");
        btnBook.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBookActionPerformed(evt);
            }
        });

        jCSource.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jCDestination.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jCTraveller.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3" }));

        jCDdate.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(520, 520, 520)
                        .addComponent(btnSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(115, 115, 115)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 684, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblDate, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lblFrom, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addGap(57, 57, 57)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jCSource, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jCDdate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(34, 34, 34)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(lblNoOfTravellers)
                                .addGap(57, 57, 57))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblTo)
                                .addGap(103, 103, 103)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jCDestination, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jCTraveller, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(624, 624, 624))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(lblTitle)
                        .addGap(654, 654, 654))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(btnBook, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(457, 457, 457))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(45, 45, 45)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblFrom)
                    .addComponent(lblTo)
                    .addComponent(jCDestination, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCSource, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblDate)
                    .addComponent(lblNoOfTravellers)
                    .addComponent(jCTraveller, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCDdate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(32, 32, 32)
                .addComponent(btnSearch)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 378, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnBook)
                .addContainerGap(121, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        // TODO add your handling code here:
        btnBook.setVisible(true);
        tblFlights.setVisible(true);

        if (jCSource.getSelectedItem().toString().equals(jCTraveller.getSelectedItem().toString())) {
            JOptionPane.showMessageDialog(null, "Source and Destination cannot be same");
            jCSource.setBorder(BorderFactory.createLineBorder(Color.RED));
            jCDestination.setBorder(BorderFactory.createLineBorder(Color.RED));
            lblFrom.setForeground(Color.red);
            lblTo.setForeground(Color.red);
        }

        List<Flight> result = fltDir.searchFlight(jCSource.getSelectedItem().toString(), jCDestination.getSelectedItem().toString(), jCDdate.getSelectedItem().toString());
        if (result.isEmpty()) {
            JOptionPane.showMessageDialog(null, "No Flights found for search criteria. Please try again", "Information", JOptionPane.INFORMATION_MESSAGE);
            DefaultTableModel dtm = (DefaultTableModel) tblFlights.getModel();
            dtm.setRowCount(0);            
            btnBook.setVisible(false);
        } else {
            populateSearchresults(result);
        }
    }//GEN-LAST:event_btnSearchActionPerformed

    private void btnBookActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBookActionPerformed
        // TODO add your handling code here:
        int selectedRow = tblFlights.getSelectedRow();
        if (selectedRow >= 0) {
            Flight flight = (Flight) tblFlights.getValueAt(selectedRow, 0);
            CreatePassengerdetails view = new CreatePassengerdetails(rightPanel, flight, booking, bookDir, Integer.parseInt(jCTraveller.getSelectedItem().toString()), fltDir, custDir);
            rightPanel.add("Createpassenger", view);
            CardLayout layout = (CardLayout) rightPanel.getLayout();
            layout.next(rightPanel);

        } else {
            JOptionPane.showMessageDialog(null, "Please select a row to book a flight", "Warning", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_btnBookActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBook;
    private javax.swing.JButton btnSearch;
    private javax.swing.JComboBox<String> jCDdate;
    private javax.swing.JComboBox<String> jCDestination;
    private javax.swing.JComboBox<String> jCSource;
    private javax.swing.JComboBox<String> jCTraveller;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblDate;
    private javax.swing.JLabel lblFrom;
    private javax.swing.JLabel lblNoOfTravellers;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JLabel lblTo;
    private javax.swing.JTable tblFlights;
    // End of variables declaration//GEN-END:variables

}
